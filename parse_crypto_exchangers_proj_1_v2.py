from selenium import webdriver
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.by import By
import gspread
import telebot
import time



#1. –°–¥–µ–ª–∞—Ç—å —Ä–∞–±–æ—á–µ–≥–æ –±–æ—Ç–∞
#2. –ë–æ—Ç —Ä–∞–∑–¥–µ–ª—è–ª –∏–Ω—Ñ—É –º–µ–∂–¥—É –æ—Ç—Å—É—Ç—Å–≤–∏–µ–º –∏ –ø–æ–∑–∏—Ü–∏–µ–π (–Ω–µ –≤—ã—à–µ 3 - –ø–ª–æ—Ö–æ)
#3. –ò–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–ª –Ω–∞ –∫–∞–∫–æ–π –ø–æ–∑–∏—Ü–∏–∏ —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∏ —Å—Å—ã–ª–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä 15 –∏–∑ 50 –∏ —Å—Å—ã–ª–∫–∞) –µ—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞
#4. –°–¥–µ–ª–∞—Ç—å –±–æ—Ç–∞ –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–º (–¥–æ–±–∞–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä –∫–∞–∂–¥—ã–µ —Ç—Ä–∏–¥—Ü–∞—Ç—å –º–∏–Ω—É—Ç)

bot = telebot.TeleBot('6863128147:AAGgI6b2nlG2oI_mZuhDnUfJVtvsvhrDIFU')


@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id, '<b>–Ø –±–æ—Ç —Å–º–æ—Ç—Ä—é –∏–Ω—Ñ—É –ø–æ –æ–±–º–µ–Ω–Ω–∏–∫–∞–º :)</b>', parse_mode='html')

def get_data_from_google_table():
    
    gc = gspread.service_account(filename='D:/1_MY PROGS/–ü–ê–†–°–ï–†–´/–ø—Ä–æ–µ–∫—Ç –∫–∏—Ä–∏–ª–ª–∞/mytest-411319-99861ed21234.json')
    sh = gc.open_by_url('https://docs.google.com/spreadsheets/d/1uCnggnsUDmjUIlI18Iw0JxivWGlEJ9ug1IOK0orLANg/edit#gid=0')
    #sh = gc.open_by_url('https://docs.google.com/spreadsheets/d/1XBhj_Hw68Oo71ZZSRcE5qBZfZoL4oPZkISnlRv6x1Po/edit#gid=0') #test table
    worksheet = sh.sheet1
    
    
    
    list_of_exchangers_and_urls=[]
    for i in range(1,7):
        values_list = worksheet.col_values(i)
        values_list.pop(1)
        list_of_exchangers_and_urls.append(values_list)
    return list_of_exchangers_and_urls

def get_result_data():
    main_data = get_data_from_google_table()
    options = webdriver.ChromeOptions()
    options.add_argument("--headless")
    driver = webdriver.Chrome(options=options)
    names = list()

    i =- 1
    for current_exchanger in main_data:
        i += 1
        names.append([current_exchanger[0]])
        #–ø—Ä–æ—Ö–æ–¥ –ø–æ –æ–±–º–µ–Ω–Ω–∏–∫—É –∏ –µ–≥–æ —Å—Å—ã–ª–∫–∞–º
    
        for url in current_exchanger[1:]:
        
            #–ø—Ä–æ—Ö–æ–¥ –ø–æ –∫–∞–∂–¥–æ–π —Å—Å—ã–ª–∫–µ –æ–±–º–µ–Ω–Ω–∏–∫–∞
            try:
                driver.get(url)                              
            
                list_of_exchangers = driver.find_element(By.ID,"rates_block")
                list_of_exchangers = list_of_exchangers.find_element(By.ID,"content_table")
                list_of_exchangers = list_of_exchangers.find_element(By.TAG_NAME,"tbody")
                list_of_exchangers = list_of_exchangers.find_elements(By.TAG_NAME,"tr")
                #—Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ –æ–±–º–µ–Ω–Ω–∏–∫–æ–≤ –Ω–∞ —Å–∞–π—Ç–µ –ø–æ–ª—É—á–µ–Ω
                names_of_exchangers_on_page = []
                for exchanger in list_of_exchangers:
                    data = exchanger.find_element(By.CLASS_NAME,"bj")
                    names_of_exchangers_on_page.append(data.text) #—Å–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π –æ–±–º–µ–Ω–Ω–∏–∫–æ–≤ –Ω–∞ —Å–∞–π—Ç–µ –ø–æ–ª—É—á–µ–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω
                #print(f"–ü–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º {url} names-->",names)
                names[i].append({url:names_of_exchangers_on_page}) #–¥–ª—è –∫–∞–∂–¥–æ–π —Å—Å—ã–ª–∫–∏ –∑–∞–ø–∏—Å—å –∏–º–µ–Ω –æ–±–º–µ–Ω–Ω–∏–∫–æ–≤ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –Ω–∞ —Å–∞–π—Ç–µ
                #print("–ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º names-->",names,end="\n")
            except Exception as ex:
                #–µ—Å–ª–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ –≤—Å—Ç—Ä–µ—Ç–∏–ª–∏ –ø—É—Å—Ç—É—é —è—á–µ–π–∫—É - –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
                pass
    return names
    #names - –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Å–æ –≤—Å–µ–π –∏–Ω—Ñ–æ–π
    # —Å–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π --> 
    # [
    # [–Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞, {—Å—Å—ã–ª–∫–∞: [–Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±–º–µ–Ω–Ω–∏–∫–∞ –ø–æ —Å—Å—ã–ª–∫–µ, –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±–º–µ–Ω–Ω–∏–∫–∞ –ø–æ —Å—Å—ã–ª–∫–µ]}, {—Å—Å—ã–ª–∫–∞: [–Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±–º–µ–Ω–Ω–∏–∫–∞ –ø–æ —Å—Å—ã–ª–∫–µ, –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±–º–µ–Ω–Ω–∏–∫–∞ –ø–æ —Å—Å—ã–ª–∫–µ]}]
    # [–Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞, {—Å—Å—ã–ª–∫–∞: [–Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±–º–µ–Ω–Ω–∏–∫–∞ –ø–æ —Å—Å—ã–ª–∫–µ, –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±–º–µ–Ω–Ω–∏–∫–∞ –ø–æ —Å—Å—ã–ª–∫–µ]}, {—Å—Å—ã–ª–∫–∞: [–Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±–º–µ–Ω–Ω–∏–∫–∞ –ø–æ —Å—Å—ã–ª–∫–µ, –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±–º–µ–Ω–Ω–∏–∫–∞ –ø–æ —Å—Å—ã–ª–∫–µ]}]
    # [–Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞, {—Å—Å—ã–ª–∫–∞: [–Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±–º–µ–Ω–Ω–∏–∫–∞ –ø–æ —Å—Å—ã–ª–∫–µ, –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±–º–µ–Ω–Ω–∏–∫–∞ –ø–æ —Å—Å—ã–ª–∫–µ]}, {—Å—Å—ã–ª–∫–∞: [–Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±–º–µ–Ω–Ω–∏–∫–∞ –ø–æ —Å—Å—ã–ª–∫–µ, –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±–º–µ–Ω–Ω–∏–∫–∞ –ø–æ —Å—Å—ã–ª–∫–µ]}]
    # ]

def get_formated_data(data):
    result_absence="–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ-\n"
    result_top3_from_bottom="–í—ã—à–µ —Ç–æ–ø 3 —Å–Ω–∏–∑—É-\n"
    result_top3_from_start="–°—Ç–æ—è—Ç –≤ —Ç–æ–ø 3 —Å–≤–µ—Ä—Ö—É-\n"
    x = data[0] #–Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞
    for item in data[1:]:
        for key, value in item.items():
            
            #–Ω–∞ —ç—Ç–æ–º –º–æ–º–µ–Ω—Ç–µ —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º –æ–¥–Ω—É –∏–∑ 3 —Å–∏—Ç—É–∞—Ü–∏–π
            if x in value:
                position = value.index(x)
                position_from_end = len(value) - position
                
                if position in [0,1,2]:
                    direction=""
                    for j in key[26:]:
                        if j!=".":
                            direction+=j
                        else:
                            break
                    result_top3_from_start+=direction+"\n"
                
                elif position_from_end not in [1,2,3]:
                    direction=""
                    for j in key[26:]:
                        if j!=".":
                            direction+=j
                        else:
                            break
                    result_top3_from_bottom+=direction+"\n" + str(position) + "/" + str(len(value))
                    
            
            elif x not in value: #–∑–Ω–∞—á–∏—Ç –æ—Ç—Å—É—Ç—Å–≤–∏–µ
                #–≤—ã—Ç—è–≥–∏–≤–∞–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                #https://www.bestchange.ru/bitcoin-to-qiwi.html?light=958
                direction=""
                for j in key[26:]:
                    if j!=".":
                        direction+=j
                    else:
                        break
                result_absence+=direction+"\n"
                #–∏—Ç–æ–≥ direction=bitcoin-to-qiwi
    
    result_data=x + ":\n" + result_absence + "\n" + result_top3_from_bottom + "\n" + result_top3_from_start         
    return result_data


global main_data
main_data=get_result_data()
for i in main_data:
    x=get_formated_data(i)
    print(x)


@bot.message_handler()
def message_fails(message):
    if message.text=="—Å—Ç–æ–ø":
            exit()
    if message.text == "üìù –û—Ç—á–µ—Ç" or message.text == "–æ—Ç—á–µ—Ç" or message.text == "/test":
        main_data=get_result_data()
    for i in main_data:
        x=get_formated_data(i)
        bot.send_message(message.chat.id, text=x)
        
    time.sleep(120)
    bot.send_message(message.chat.id, text="–ø—Ä–æ—à–ª–æ 2 –º–∏–Ω")
    return message_fails(message)


bot.polling(non_stop=True, interval=0)